// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Typescript Generator should generate unknown custom scalar type as \`any\` 1`] = `
"// tslint:disable
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql'
/**
 * This file is auto-generated by @beamf/graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLUserFilter {
  username?: (string | null)[] | null
}

/**
 * Different role will have different access to our functionality
 * In the future, this will be changed by having User as interface
 * and implementing multiple User
 */
export enum GQLUserRole {
  /**
   * System Administrator
   */
  sysAdmin = 'sysAdmin',
  /**
   * Manager - Have access to manage functions
   */
  manager = 'manager',
  /**
   * General Staff
   */
  clerk = 'clerk',
  /**
   * 
   * @deprecated Use 'clerk' instead
   */
  employee = 'employee'
}

export type GQLSearchResult = GQLUser | GQLProductA | GQLProductB

/** Use this to resolve union type SearchResult */
export type GQLPossibleSearchResultTypeNames = 'User' | 'ProductA' | 'ProductB'

export interface GQLSearchResultNameMap {
  SearchResult: GQLSearchResult
  User: GQLUser
  ProductA: GQLProductA
  ProductB: GQLProductB
}

export interface GQLCreateUserInput {
  username: string
  email: string
  password: string
  createdAt: GQLDate
}

/**
 * Custom scalar type
 */
export type GQLDate = any

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/

export type Value<T> = T | Promise<T>
/**
 * The reason property is nullable even for non-null field is because we do not in the model
 * whether the field is or possibly implemented by the resolver.
 * If a resolve function is not given, then a default resolve behavior is used
 * which takes the property of the source object of the same name as the field
 * and returns it as the Value, or if it's a function, returns the Value
 * of calling that function while passing along args, context and info.
 * NOTE how the function signature does not have parent
 */
export type GQLProperty<T, Args, Ctx> = Value<T | null> | ((args: Args, context: Ctx, info: GraphQLResolveInfo) => Value<T>)

export type GQLResolver<T, P, Args, Ctx> = ((parent: P, args: Args, context: Ctx, info: GraphQLResolveInfo) => Value<T>)
/**
 * When used as properties of the return value of an existing resolver, this really should be
 * Value<T> instead -> So resolvers should not be returning other resolver-like objects
 * In practice the implementation \\"sort of\\" allows it (see above)
 * TODO: Finish correct type def for model separate from resolver
 */
export type GQLPropertyOrResolver<T, P, Args, Ctx> = GQLProperty<T, Args, Ctx> | GQLResolver<T, P, Args, Ctx>

export type GQLTypeResolver<P, Ctx, T> = 
  (parent: P, context: Ctx, info: GraphQLResolveInfo) => T
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface AllResolvers {
  RootQuery?: GQLRootQuery
  User?: GQLUser
  IProduct?: {  __resolveType: GQLIProduct_TypeResolver }
  SearchResult?: {  __resolveType: GQLSearchResult_TypeResolver }
  ProductA?: GQLProductA
  ProductScalar?: GQLProductScalar
  ProductB?: GQLProductB
  ProductListScalar?: GQLProductListScalar
  RootMutation?: GQLRootMutation
  Date?: GraphQLScalarType
}

// MARK: --- GQLRootQuery

export interface GQLRootQuery<P = {}> {
  Users?: RootQuery_Users<P>
  User?: RootQuery_User<P>
  Products?: RootQuery_Products<P>
  Search?: RootQuery_Search<P>
}



export interface RootQuery_Users_Args { input?: GQLUserFilter | null }
export type RootQuery_Users<P> = GQLPropertyOrResolver<GQLUser[], P, RootQuery_Users_Args, any>
export type RootQuery_User<P> = GQLPropertyOrResolver<GQLUser | null, P, {}, any>
export type RootQuery_Products<P> = GQLPropertyOrResolver<GQLIProduct[] | null, P, {}, any>

export interface RootQuery_Search_Args { key?: string | null }
export type RootQuery_Search<P> = GQLPropertyOrResolver<GQLSearchResult | null, P, RootQuery_Search_Args, any>

// MARK: --- GQLUser

/**
 * A user of the system
 */
export interface GQLUser<P = {}> {
  firstName?: User_FirstName<P>
  lastName?: User_LastName<P>
  username?: User_Username<P>
  email?: User_Email<P>
  role?: User_Role<P>
  profilePicture?: User_ProfilePicture<P>
  activated?: User_Activated<P>
}


export type User_FirstName<P> = GQLPropertyOrResolver<string, P, {}, any>
export type User_LastName<P> = GQLPropertyOrResolver<string, P, {}, any>
/**
 * 
 * @deprecated Email will replace username. If you are still using username please change it
 */
export type User_Username<P> = GQLPropertyOrResolver<string, P, {}, any>
export type User_Email<P> = GQLPropertyOrResolver<string, P, {}, any>
export type User_Role<P> = GQLPropertyOrResolver<GQLUserRole, P, {}, any>
/**
 * Url to the image
 */
export type User_ProfilePicture<P> = GQLPropertyOrResolver<string | null, P, {}, any>
/**
 * Account must be activated before using
 */
export type User_Activated<P> = GQLPropertyOrResolver<boolean, P, {}, any>

// MARK: --- GQLIProduct

export interface GQLIProduct<P = {}> {
  id?: IProduct_Id<P>
  name?: IProduct_Name<P>
  relatedProducts?: IProduct_RelatedProducts<P>
}


export type IProduct_Id<P> = GQLPropertyOrResolver<string, P, {}, any>
export type IProduct_Name<P> = GQLPropertyOrResolver<string, P, {}, any>
/**
 * Customers who buy this will also buy these
 */
export type IProduct_RelatedProducts<P> = GQLPropertyOrResolver<GQLIProduct[], P, {}, any>

/** Use this to resolve interface type IProduct */
export type GQLPossibleIProductTypeNames = 'ProductA' | 'ProductB'

export interface GQLIProductNameMap {
  IProduct: GQLIProduct
  ProductA: GQLProductA
  ProductB: GQLProductB
}

// MARK: --- GQLIProduct_TypeResolver

export type GQLIProduct_TypeResolver<P = {}> = GQLTypeResolver<P, any, 'ProductA' | 'ProductB'>

// MARK: --- GQLSearchResult_TypeResolver

export type GQLSearchResult_TypeResolver<P = {}> = GQLTypeResolver<P, any, 'User' | 'ProductA' | 'ProductB'>

// MARK: --- GQLProductA

/**
 * Try to cover List/Non-null List/Non-null list of non-null items
 */
export interface GQLProductA<P = {}> extends GQLIProduct {
  id?: ProductA_Id<P>
  name?: ProductA_Name<P>
  relatedProducts?: ProductA_RelatedProducts<P>
  ProductA1?: ProductA_ProductA1<P>
  ProductA2?: ProductA_ProductA2<P>
  ProductA3?: ProductA_ProductA3<P>
  ProductA4?: ProductA_ProductA4<P>
  ProductA5?: ProductA_ProductA5<P>
  ProductA6?: ProductA_ProductA6<P>
}


export type ProductA_Id<P> = GQLPropertyOrResolver<string, P, {}, any>
export type ProductA_Name<P> = GQLPropertyOrResolver<string, P, {}, any>
/**
 * Customers who buy this will also buy these
 */
export type ProductA_RelatedProducts<P> = GQLPropertyOrResolver<GQLIProduct[], P, {}, any>
export type ProductA_ProductA1<P> = GQLPropertyOrResolver<GQLProductScalar | null, P, {}, any>
export type ProductA_ProductA2<P> = GQLPropertyOrResolver<GQLProductScalar, P, {}, any>
export type ProductA_ProductA3<P> = GQLPropertyOrResolver<(GQLProductScalar | null)[] | null, P, {}, any>
export type ProductA_ProductA4<P> = GQLPropertyOrResolver<(GQLProductScalar | null)[], P, {}, any>
export type ProductA_ProductA5<P> = GQLPropertyOrResolver<GQLProductScalar[] | null, P, {}, any>
export type ProductA_ProductA6<P> = GQLPropertyOrResolver<GQLProductScalar[], P, {}, any>

// MARK: --- GQLProductScalar

/**
 * Test with all scalar field
 */
export interface GQLProductScalar<P = {}> {
  scalarString1?: ProductScalar_ScalarString1<P>
  scalarString2?: ProductScalar_ScalarString2<P>
  scalarInt1?: ProductScalar_ScalarInt1<P>
  scalarInt2?: ProductScalar_ScalarInt2<P>
  scalarFloat1?: ProductScalar_ScalarFloat1<P>
  scalarFloat2?: ProductScalar_ScalarFloat2<P>
  scalarID1?: ProductScalar_ScalarID1<P>
  scalarID2?: ProductScalar_ScalarID2<P>
  scalarBoolean1?: ProductScalar_ScalarBoolean1<P>
  scalarBoolean2?: ProductScalar_ScalarBoolean2<P>
}


export type ProductScalar_ScalarString1<P> = GQLPropertyOrResolver<string | null, P, {}, any>
export type ProductScalar_ScalarString2<P> = GQLPropertyOrResolver<string, P, {}, any>
export type ProductScalar_ScalarInt1<P> = GQLPropertyOrResolver<number | null, P, {}, any>
export type ProductScalar_ScalarInt2<P> = GQLPropertyOrResolver<number, P, {}, any>
export type ProductScalar_ScalarFloat1<P> = GQLPropertyOrResolver<number | null, P, {}, any>
export type ProductScalar_ScalarFloat2<P> = GQLPropertyOrResolver<number, P, {}, any>
export type ProductScalar_ScalarID1<P> = GQLPropertyOrResolver<string | null, P, {}, any>
export type ProductScalar_ScalarID2<P> = GQLPropertyOrResolver<string, P, {}, any>
export type ProductScalar_ScalarBoolean1<P> = GQLPropertyOrResolver<boolean | null, P, {}, any>
export type ProductScalar_ScalarBoolean2<P> = GQLPropertyOrResolver<boolean, P, {}, any>

// MARK: --- GQLProductB

export interface GQLProductB<P = {}> extends GQLIProduct {
  id?: ProductB_Id<P>
  name?: ProductB_Name<P>
  relatedProducts?: ProductB_RelatedProducts<P>
  ProductB1?: ProductB_ProductB1<P>
  ProductB2?: ProductB_ProductB2<P>
  ProductB3?: ProductB_ProductB3<P>
  ProductB4?: ProductB_ProductB4<P>
  ProductB5?: ProductB_ProductB5<P>
  ProductB6?: ProductB_ProductB6<P>
}


export type ProductB_Id<P> = GQLPropertyOrResolver<string, P, {}, any>
export type ProductB_Name<P> = GQLPropertyOrResolver<string, P, {}, any>
/**
 * Customers who buy this will also buy these
 */
export type ProductB_RelatedProducts<P> = GQLPropertyOrResolver<GQLIProduct[], P, {}, any>
export type ProductB_ProductB1<P> = GQLPropertyOrResolver<GQLProductListScalar | null, P, {}, any>
export type ProductB_ProductB2<P> = GQLPropertyOrResolver<GQLProductListScalar, P, {}, any>
export type ProductB_ProductB3<P> = GQLPropertyOrResolver<(GQLProductListScalar | null)[] | null, P, {}, any>
export type ProductB_ProductB4<P> = GQLPropertyOrResolver<(GQLProductListScalar | null)[], P, {}, any>
export type ProductB_ProductB5<P> = GQLPropertyOrResolver<GQLProductListScalar[] | null, P, {}, any>
export type ProductB_ProductB6<P> = GQLPropertyOrResolver<GQLProductListScalar[], P, {}, any>

// MARK: --- GQLProductListScalar

export interface GQLProductListScalar<P = {}> {
  listString1?: ProductListScalar_ListString1<P>
  listString2?: ProductListScalar_ListString2<P>
  listString3?: ProductListScalar_ListString3<P>
  listString4?: ProductListScalar_ListString4<P>
  listInt1?: ProductListScalar_ListInt1<P>
  listInt2?: ProductListScalar_ListInt2<P>
  listInt3?: ProductListScalar_ListInt3<P>
  listInt4?: ProductListScalar_ListInt4<P>
  listFloat1?: ProductListScalar_ListFloat1<P>
  listFloat2?: ProductListScalar_ListFloat2<P>
  listFloat3?: ProductListScalar_ListFloat3<P>
  listFloat4?: ProductListScalar_ListFloat4<P>
  listID1?: ProductListScalar_ListID1<P>
  listID2?: ProductListScalar_ListID2<P>
  listID3?: ProductListScalar_ListID3<P>
  listID4?: ProductListScalar_ListID4<P>
  listBoolean1?: ProductListScalar_ListBoolean1<P>
  listBoolean2?: ProductListScalar_ListBoolean2<P>
  listBoolean3?: ProductListScalar_ListBoolean3<P>
  listBoolean4?: ProductListScalar_ListBoolean4<P>
}


export type ProductListScalar_ListString1<P> = GQLPropertyOrResolver<(string | null)[] | null, P, {}, any>
export type ProductListScalar_ListString2<P> = GQLPropertyOrResolver<(string | null)[], P, {}, any>
export type ProductListScalar_ListString3<P> = GQLPropertyOrResolver<string[] | null, P, {}, any>
export type ProductListScalar_ListString4<P> = GQLPropertyOrResolver<string[], P, {}, any>
export type ProductListScalar_ListInt1<P> = GQLPropertyOrResolver<(number | null)[] | null, P, {}, any>
export type ProductListScalar_ListInt2<P> = GQLPropertyOrResolver<(number | null)[], P, {}, any>
export type ProductListScalar_ListInt3<P> = GQLPropertyOrResolver<number[] | null, P, {}, any>
export type ProductListScalar_ListInt4<P> = GQLPropertyOrResolver<number[], P, {}, any>
export type ProductListScalar_ListFloat1<P> = GQLPropertyOrResolver<(number | null)[] | null, P, {}, any>
export type ProductListScalar_ListFloat2<P> = GQLPropertyOrResolver<(number | null)[], P, {}, any>
export type ProductListScalar_ListFloat3<P> = GQLPropertyOrResolver<number[] | null, P, {}, any>
export type ProductListScalar_ListFloat4<P> = GQLPropertyOrResolver<number[], P, {}, any>
export type ProductListScalar_ListID1<P> = GQLPropertyOrResolver<(string | null)[] | null, P, {}, any>
export type ProductListScalar_ListID2<P> = GQLPropertyOrResolver<(string | null)[], P, {}, any>
export type ProductListScalar_ListID3<P> = GQLPropertyOrResolver<string[] | null, P, {}, any>
export type ProductListScalar_ListID4<P> = GQLPropertyOrResolver<string[], P, {}, any>
export type ProductListScalar_ListBoolean1<P> = GQLPropertyOrResolver<(boolean | null)[] | null, P, {}, any>
export type ProductListScalar_ListBoolean2<P> = GQLPropertyOrResolver<(boolean | null)[], P, {}, any>
export type ProductListScalar_ListBoolean3<P> = GQLPropertyOrResolver<boolean[] | null, P, {}, any>
export type ProductListScalar_ListBoolean4<P> = GQLPropertyOrResolver<boolean[], P, {}, any>

// MARK: --- GQLRootMutation

export interface GQLRootMutation<P = {}> {
  createUser?: RootMutation_CreateUser<P>
}



export interface RootMutation_CreateUser_Args { input?: GQLCreateUserInput | null }
export type RootMutation_CreateUser<P> = GQLPropertyOrResolver<GQLUser | null, P, RootMutation_CreateUser_Args, any>"
`;
