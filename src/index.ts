import * as fs from 'fs'
import { GraphQLSchema } from 'graphql'
import * as path from 'path'
import { isString } from 'util'

import { defaultOptions, GenerateTypescriptOptions } from './options'
import {
  GenerateResolversResult,
  ResolverTypesGenerator,
} from './resolver-types-generator'
import { SimpleTypesGenerator } from './simple-types-generator'
import {
  buildSchemaFromTypeDefs,
  formatTabSpace,
  getSchemaContentViaLocalFile,
  introspectSchema,
} from './utils'

const packageJson = require(path.join(__dirname, '../package.json'))

const jsDoc = `/**
 * This file is auto-generated by ${packageJson.name}
 * Please note that any changes in this file may be overwritten
 */`

const typeDefsDecoration = [
  '/*******************************',
  ' *                             *',
  ' *          TYPE DEFS          *',
  ' *                             *',
  ' *******************************/',
]

const typeResolversDecoration = [
  '/*********************************',
  ' *                               *',
  ' *         TYPE RESOLVERS        *',
  ' *                               *',
  ' *********************************/',
]

export async function generateTSTypesFromSchema(
  schema: GraphQLSchema,
  options: GenerateTypescriptOptions,
): Promise<string> {
  const mergedOptions = { ...defaultOptions, ...options }

  const introspectResult = await introspectSchema(schema)

  const tsGenerator = new SimpleTypesGenerator(mergedOptions)
  const typeDefs = await tsGenerator.generate(introspectResult)

  let typeResolvers: GenerateResolversResult = {
    body: [],
    importHeader: [],
  }
  if (!options.noResolver) {
    const tsResolverGenerator = new ResolverTypesGenerator(mergedOptions)
    typeResolvers = await tsResolverGenerator.generate(introspectResult)
  }

  let header = ['// tslint:disable', ...typeResolvers.importHeader, jsDoc]

  let body: string[] = [
    ...typeDefsDecoration,
    ...typeDefs,
    ...typeResolversDecoration,
    ...typeResolvers.body,
  ]

  if (mergedOptions.namespace) {
    body = [`namespace ${options.namespace} {`, ...body, '}']
  }

  if (mergedOptions.global) {
    body = ['export { };', '', 'declare global {', ...body, '}']
  }

  const formatted = formatTabSpace(
    [...header, ...body],
    mergedOptions.tabSpaces,
  )
  return formatted.join('\n')
}

export async function generateTSTypesFromTypeDefs(
  typeDefs: string,
  options: GenerateTypescriptOptions,
): Promise<string> {
  const schema = buildSchemaFromTypeDefs(typeDefs)
  return generateTSTypesFromSchema(schema, options)
}

export async function generateTypeScriptTypes(
  schemaOrPath: GraphQLSchema | string,
  outputPath: string,
  options: GenerateTypescriptOptions = defaultOptions,
) {
  let content: string
  if (isString(schemaOrPath)) {
    const typeDefs = getSchemaContentViaLocalFile(path.resolve(schemaOrPath))
    content = await generateTSTypesFromTypeDefs(typeDefs, options)
  } else {
    content = await generateTSTypesFromSchema(schemaOrPath, options)
  }
  fs.writeFileSync(outputPath, content, 'utf-8')
}
